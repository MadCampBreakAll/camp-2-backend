// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String             @id @db.Char(13)
  nickname        String             @unique @db.VarChar(20)
  friends         Friend[]           @relation("userFriend")
  friendsRelation Friend[]           @relation("friendUser")
  writtenPages    Page[]             @relation("user")
  nextPages       Page[]             @relation("nextPageUser")
  chamyeoDiaries  ChamyeoUserDiary[]
  body            Int
  bodyColor       Int
  blushColor      Int
  font            Int
  item            Int
  nextDiaries     Diary[]            @relation("nextUserDiary")
  myDiaries       Diary[]
}

model Friend {
  user     User   @relation("userFriend", fields: [userId], references: [id], onDelete: Cascade)
  userId   String @db.Char(13)
  friend   User   @relation("friendUser", fields: [friendId], references: [id], onDelete: Cascade)
  friendId String @db.Char(13)
  status   Int

  @@id([userId, friendId])
}

model Diary {
  id           Int                @id @default(autoincrement())
  title        String             @db.VarChar(20)
  createdAt    DateTime           @default(now())
  chamyeoUsers ChamyeoUserDiary[]
  nextUser     User?              @relation("nextUserDiary", fields: [nextUserId], references: [id], onDelete: SetNull)
  nextUserId   String?            @db.Char(13)
  owner        User               @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId      String             @db.Char(13)
  pages        Page[]
}

model ChamyeoUserDiary {
  diary   Diary  @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  diaryId Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @db.Char(13)
  order   Int

  @@id([diaryId, userId])
}

model Page {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], name: "user", onDelete: SetNull)
  userId     String   @db.Char(13)
  nextUser   User?    @relation(fields: [nextUserId], references: [id], name: "nextPageUser", onDelete: SetNull)
  nextUserId String?  @db.Char(13)
  diary      Diary    @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  diaryId    Int
  title      String   @db.VarChar(20)
  body       String   @db.Text
  createdAt  DateTime @default(now())
  color      String   @db.Char(7)
  img        String   @db.VarChar(255)
}
